<- match_popularity %>%
filter(home_team=="Fitzroy" | away_team =="Fitzroy") %>%
arrange(attend) %>%
print(n = 10) # We can combine this filter with the arrange function, and print the first 10 records to the console.
match_popularity
match_popularity %>%
filter(home_team == "Fitzroy") # Limit to records with Fitzroy as home team
filter_match_population <-
match_popularity %>%
filter(home_team=="Fitzroy" | away_team =="Fitzroy") %>%
arrange(attend) %>%
print(n = 10) # We can combine this filter with the arrange function, and print the first 10 records to the console.
mutate_afl <- afl %>%
mutate(margin = abs(home_score - away_score)) %>%
select(home_score, away_score, margin)
frames <- read_csv("./data/frames_ex2.csv")
frames
rm(list = ls())
frames_small <- frames %>%
group_by(id, gender, age, condition) %>%
summarise(response = mean(response))
frames <- read_csv("./data/frames_ex2.csv")
frames_small <- frames %>%
group_by(id, gender, age, condition) %>%
summarise(response = mean(response))
View(frames_small)
View(frames)
View(frames)
View(frames_small)
View(frames_small)
hist(frames_small$age)
frames_small %>%
ggplot(aes(x = age)) +
geom_histogram()
# Plot distributions of ages, split by condition
layout(matrix(1:2, 1, 2))
hist(frames_small$age[frames$condition == "category"])
hist(frames_small$age[frames$condition == "property"])
frames_small %>%
ggplot(aes(x = age)) +
geom_histogram() +
facet_wrap(~condition)
frames_small %>%
ggplot(aes(x = age)) + geom_histogram() + facet_wrap(~condition)
frames_small %>%
ggplot(mapping = aes(x = age, y = response))
frames_small %>%
ggplot(mapping = aes(x = age, y = response)) + # Input x and y data
geom_point() # Generate the points on the plot
frames_small %>%
ggplot(mapping = aes(x = age, y = response, color = condition)) + # Input x, y, and color split
geom_point() # Generate the points on the plot
frames_small %>%
ggplot(mapping = aes(x = age, y = response, colour = condition)) +
geom_point() +
geom_rug() # add "rug" visualisation to plot
frames_small %>%
ggplot(aes(x = gender)) +  # set up the mapping
facet_wrap(~condition) +   # split it into plots
geom_bar()                 # add the bars!
frames_small %>%
ggplot(aes(x = condition, y = response)) +
geom_boxplot()
frames_small %>%
ggplot(aes(x = condition, y = response, color = condition)) +
geom_boxplot()
frames_small %>%
ggplot(aes(x = condition, y = response)) +
geom_violin()
frames_small %>%
ggplot(aes(x = condition, y = response, color = condition)) +
geom_violin()
frames_small %>%
ggplot(aes(x = condition, y = response, color = condition)) +
geom_violin() + # This will plot the generic violin plot
geom_point()
frames_small %>%
ggplot(aes(x = condition, y = response, color = condition)) +
geom_violin() + # This will plot the generic violin plot
geom_jitter()
frames %>%                               # start with the full data set!
ggplot(aes(
x = factor(test_item),               # treat "test_item" as categorical
y = response)) +                     # y variable is "response"
facet_grid(sample_size ~ condition) +  # add faceting
geom_boxplot()                         # oh, right... add the boxplots :-)
frames <- frames %>%
mutate(sample_size = factor(sample_size, levels = c("small","medium","large")))
frames %>%
ggplot(aes(
x = factor(test_item),
y = response)) +
facet_grid(condition ~ sample_size) +  # reversed faceting
geom_boxplot(outlier.alpha = 0.1) +    # alpha sets the transparency
xlab("Location of Test Stimulus") +    # add x-label
ylab("Response")
frames %>%                               # start with the full data set!
ggplot(aes(
x = factor(test_item),               # treat "test_item" as categorical
y = response)) +                     # y variable is "response"
facet_grid(sample_size ~ condition) +  # add faceting
geom_boxplot()                         # add the boxplots :-)
frames %>%                               # start with the full data set!
ggplot(aes(
x = factor(test_item),               # treat "test_item" as categorical
y = response)) +                     # y variable is "response"
facet_grid(sample_size ~ condition) +  # add faceting
geom_boxplot()                         # add the boxplots :-)
frames %>%
ggplot(aes(x = test_item, y = response)) +
facet_grid(condition ~ sample_size) +
geom_count()
frames %>%
ggplot(aes(x = test_item, y = response)) +
facet_grid(condition ~ sample_size) +
geom_count()
frames %>%
ggplot(aes(x = test_item, y = response)) +
facet_grid(condition ~ sample_size) +
geom_count(aes(colour = ..n..)) +
scale_colour_gradient(low = "grey80", high = "grey20")
my_pic <- frames_mean %>%
ggplot(aes(x = test_item, y = mean_response, colour = condition)) +
geom_point() +
geom_errorbar(aes(ymin = lower, ymax = upper)) +  # add the error bars!
facet_wrap(~sample_size)
# To do this, we will first create a summary data set, including the:
frames_mean <- frames %>%
group_by(condition,sample_size,test_item) %>%
summarise(
mean_response = mean(response),    # mean
lower = lsr::ciMean(response)[1],  # lower 95% CI
upper = lsr::ciMean(response)[2]   # upper 95% CI
)
plot(my_pic)
my_pic <- frames_mean %>%
ggplot(aes(x = test_item, y = mean_response, colour = condition)) +
geom_point() +
geom_errorbar(aes(ymin = lower, ymax = upper)) +  # add the error bars!
facet_wrap(~sample_size)
plot(my_pic)
# To do this, we will first create a summary data set in a new
# dataframe which includes the:
frames_mean <- frames %>%
group_by(condition,sample_size,test_item) %>%
summarise(
mean_response = mean(response),    # mean
lower = lsr::ciMean(response)[1],  # lower 95% CI
upper = lsr::ciMean(response)[2]   # upper 95% CI
)
my_pic <- frames_mean %>%
ggplot(aes(x = test_item, y = mean_response, colour = condition)) +
geom_point() +
geom_errorbar(aes(ymin = lower, ymax = upper)) +  # add the error bars!
facet_wrap(~sample_size)
frames_mean <- frames %>%
group_by(condition,sample_size,test_item) %>%
summarise(
mean_response = mean(response),    # mean
lower = lsr::ciMean(response)[1],  # lower 95% CI
upper = lsr::ciMean(response)[2]   # upper 95% CI
)
install.packages("lsr"")
)
")"
install.packages("lsr")
frames_mean <- frames %>%
group_by(condition,sample_size,test_item) %>%
summarise(
mean_response = mean(response),    # mean
lower = lsr::ciMean(response)[1],  # lower 95% CI
upper = lsr::ciMean(response)[2]   # upper 95% CI
)
errorbar_fig <- frames_mean %>%
ggplot(aes(x = test_item, y = mean_response, colour = condition)) +
geom_point() +
geom_errorbar(aes(ymin = lower, ymax = upper)) +  # add the error bars!
facet_wrap(~sample_size)
plot(errorbar_fig)
errorbar_fig + geom_line()
errorbar_fig_line = errorbar_fig + geom_line()
ggsave(
filename = "./figures/r-psy-visualise.pdf",
plot = errorbar_fig_line,
width = 16,
height = 8,
units = "cm"
)
ggsave(
filename = "./figures/r-psy-visualise.pdf",
plot = errorbar_fig_line,
width = 16,
height = 8,
units = "cm"
)
# Setup data   #################################################
# We previously looked at the "frames" data set in the visualisation script
frames <- read_csv("./data/frames_ex2.csv")
# However, this data was not formatted like this when extracted from OSF.
# From OSF, the data was in a wide format:
#       the data frame contains only one row per person,
#       and each judgment they make is stored as a separate variable.
wide_frames <- read_csv("./data/frames_ex2_wide.csv")
libary("tidyverse")
libaries("tidyverse")
library(tidyverse)
setwd("./r-psychsci/"); library(tidyverse)
long_frames <- wide_frames %>%
gather(key = "query", value="response",
"SS2-R1", "SS2-R2","SS2-R3","SS2-R4","SS2-R5","SS2-R6","SS2-R7",
"SS6-R1","SS6-R2","SS6-R3","SS6-R4","SS6-R5","SS6-R6","SS6-R7",
"SS12-R1","SS12-R2","SS12-R3","SS12-R4","SS12-R5","SS12-R6","SS12-R7")
long_frames
# Setup data   #################################################
# We previously looked at the "frames" data set in the visualisation script
# Here, each row is a trial for each participant in each condition
# This is known as a long format
frames <- read_csv("./data/frames_ex2.csv")
# However, this data was not formatted like this when extracted from OSF.
# From OSF, the data was in a wide format:
#       the data frame contains only one row per person,
#       and each judgment they make is stored as a separate variable.
wide_frames <- read_csv("./data/frames_ex2_wide.csv")
# Converting from long to wide frame  ###########################
long_frames <- wide_frames %>%
gather(key = "query", value="response",
"SS2-R1", "SS2-R2","SS2-R3","SS2-R4","SS2-R5","SS2-R6","SS2-R7",
"SS6-R1","SS6-R2","SS6-R3","SS6-R4","SS6-R5","SS6-R6","SS6-R7",
"SS12-R1","SS12-R2","SS12-R3","SS12-R4","SS12-R5","SS12-R6","SS12-R7")
long_frames
View(wide_frames)
View(wide_frames)
View(long_frames)
View(long_frames)
wide_frames_conv <- long_frames %>% spread(key = "query", value = "response")
long_frames %>%
separate(
col = query,
into = c("sample_size","test_item"),
sep = "-R"
)
long_frames =
long_frames %>%
separate(
col = query,
into = c("sample_size","test_item"),
sep = "-R"
)
View(long_frames)
long_frames %>%
unite(
col = query,
into = c("sample_size","test_item"),
sep = "-R"
)
long_frames %>%
unite("sample_size","test_item")
long_frames_unite =
long_frames %>%
unite("sample_size","test_item")
View(long_frames_unite)
View(long_frames_unite)
View(long_frames)
long_frames <- long_frames %>%
separate(
col = query,
into = c("sample_size","test_item"),
sep = "-R"
) %>%
mutate(test_item = as.numeric(test_item))
long_frames
unite(long_frames,"sample_size","test_item")
long_frames =
unite(long_frames,"sample_size","test_item")
View(long_frames)
# Converting from long to wide frame  ###########################
# We can convert from wide-to-long using the function below
long_frames <- wide_frames %>%
gather(key = "query", value="response",
"SS2-R1", "SS2-R2","SS2-R3","SS2-R4","SS2-R5","SS2-R6","SS2-R7",
"SS6-R1","SS6-R2","SS6-R3","SS6-R4","SS6-R5","SS6-R6","SS6-R7",
"SS12-R1","SS12-R2","SS12-R3","SS12-R4","SS12-R5","SS12-R6","SS12-R7")
long_frames =
long_frames %>%
separate(
col = query,
into = c("sample_size","test_item"),
sep = "-R"
)
long_frames <- long_frames %>%
separate(
col = query,
into = c("sample_size","test_item"),
sep = "-R"
) %>%
mutate(test_item = as.numeric(test_item))
long_frames
View(long_frames)
# Converting from long to wide frame  ###########################
# We can convert from wide-to-long using the function below
long_frames <- wide_frames %>%
gather(key = "query", value="response",
"SS2-R1", "SS2-R2","SS2-R3","SS2-R4","SS2-R5","SS2-R6","SS2-R7",
"SS6-R1","SS6-R2","SS6-R3","SS6-R4","SS6-R5","SS6-R6","SS6-R7",
"SS12-R1","SS12-R2","SS12-R3","SS12-R4","SS12-R5","SS12-R6","SS12-R7")
long_frames %>%
separate(
col = query,
into = c("sample_size","test_item"),
sep = "-R"
)
View(long_frames)
c("sample_size","test_item")
long_frames %>%
unite(
col = c("sample_size","test_item"),
into = test,
sep = "-R"
)
long_frames %>%
unite(
col = "united",
"sample_size","test_item",
sep = "-R"
)
View(long_frames)
long_frames <- wide_frames %>%
gather(key = "query", value="response",
"SS2-R1", "SS2-R2","SS2-R3","SS2-R4","SS2-R5","SS2-R6","SS2-R7",
"SS6-R1","SS6-R2","SS6-R3","SS6-R4","SS6-R5","SS6-R6","SS6-R7",
"SS12-R1","SS12-R2","SS12-R3","SS12-R4","SS12-R5","SS12-R6","SS12-R7")
long_frames %>%
separate(
col = query,
into = c("sample_size","test_item"),
sep = "-R"
)
long_frames %>%
unite(
col = "united",
"sample_size","test_item",
sep = "-R"
)
View(long_frames)
long_frames_sep =
long_frames %>%
separate(
col = query,
into = c("sample_size","test_item"),
sep = "-R"
)
long_frames_uni =
long_frames_sep %>%
unite(
col = "united",
"sample_size","test_item",
sep = "-R"
)
View(long_frames_uni)
View(long_frames_uni)
long_frames <- long_frames %>%
mutate(sample_size = dplyr::recode(
sample_size,
"SS2" = "small",
"SS6" = "medium",
"SS12" = "large")
)
# using the "mutate" function.
long_frames <- long_frames %>%
separate(      # Split
col = query, # Query variable
into = c("sample_size","test_item"), #Into two variables
sep = "-R" # Where this string is observed
) %>%
mutate(test_item = as.numeric(test_item)) # Change item to numeric.
long_frames
# Recoding variables ####################################
long_frames <- long_frames %>%
mutate(sample_size = dplyr::recode(
sample_size,
"SS2" = "small",
"SS6" = "medium",
"SS12" = "large")
)
# Recoding variables ####################################
# Now we have sample size as it's own variable, we can recode it
# into a structure that is a little more intuitive. Below,
# we can relabel the string as small, medium, or large, based on the string
# observed in the sample_size column.
long_frames <- long_frames %>%
mutate(sample_size = dplyr::recode(
sample_size,
"SS2" = "small",
"SS6" = "medium",
"SS12" = "large")
)
long_frames
# An alternative approach is to use the "case_when" function
long_frames <- long_frames %>%
mutate(n_obs = case_when(
sample_size == "small" ~ 2,
sample_size == "medium" ~ 6,
sample_size == "large" ~ 12
))
long_frames
View(long_frames)
# Converting from long to wide frame  ###########################
# We can convert from wide-to-long using the function below
long_frames <- wide_frames %>%
gather(key = "query", value="response",
"SS2-R1", "SS2-R2","SS2-R3","SS2-R4","SS2-R5","SS2-R6","SS2-R7",
"SS6-R1","SS6-R2","SS6-R3","SS6-R4","SS6-R5","SS6-R6","SS6-R7",
"SS12-R1","SS12-R2","SS12-R3","SS12-R4","SS12-R5","SS12-R6","SS12-R7")
# However, some issues are still outstanding. For example, test_item is
# stored as a chr data type, when it should be numeric. We can change this by
# using the "mutate" function.
long_frames <- long_frames %>%
separate(      # Split
col = query, # Query variable
into = c("sample_size","test_item"), #Into two variables
sep = "-R" # Where this string is observed
) %>%
mutate(test_item = as.numeric(test_item)) # Change item to numeric.
View(long_frames)
# An alternative approach is to use the "case_when" function
long_frames <- long_frames %>%
mutate(n_obs = case_when(
sample_size == "small" ~ 2,
sample_size == "medium" ~ 6,
sample_size == "large" ~ 12
))
long_frames
View(long_frames)
long_frames <- long_frames %>%
mutate(sample_size = dplyr::recode(
sample_size,
"SS2" = "small",
"SS6" = "medium",
"SS12" = "large")
)
long_frames
# An alternative approach is to use the "case_when" function
long_frames <- long_frames %>%
mutate(n_obs = case_when(
sample_size == "small" ~ 2,
sample_size == "medium" ~ 6,
sample_size == "large" ~ 12
))
long_frames
library(lubridate)
ymd(20101215)
ymd("2010/12/15")
ymd("2010 December 15")
oddball <- readLines("./data/oddballdate2.csv")
oddball
dmy(oddball)
dmy_hm(oddball)
# We can then combine these
d1 <- oddball %>% dmy_hm() %>% date()
d2 <- oddball %>% dmy()
clean_dates <- case_when(
is.na(d1) ~ d2,
TRUE ~ d1
)
clean_dates
oddball[is.na(clean_dates)]
d1 <- oddball %>% mdy_hm() %>% date()
test = mdy(oddball[is.na(clean_dates)])
oddball_fix = mdy(oddball[is.na(clean_dates)])
nightgarden_top <- read_csv("./data/nightgarden_top.csv")
nightgarden_middle <- read_csv("./data/nightgarden_middle.csv")
nightgarden_bottom <- read_csv("./data/nightgarden_bottom.csv")
bind_rows(nightgarden_top, nightgarden_middle, nightgarden_bottom)
nightgarden_all <- bind_rows(nightgarden_top, nightgarden_middle, nightgarden_bottom)
demographics <- read_csv("./data/discworld_demographics.csv")
demographics
responses <- read_csv("./data/discworld_responses.csv")
responses
View(demographics)
View(demographics)
View(responses)
View(responses)
inner_join(demographics, responses)
full_join(demographics, responses)
left_join(demographics, responses)
glimpse(data_adult)
library(dplyr)
data_adult <-read.csv("https://raw.githubusercontent.com/guru99-edu/R-Programming/master/adult.csv")
glimpse(data_adult)
continuous <-select_if(data_adult, is.numeric)
summary(continuous)
# Ceheck data
glimpse(data_adult)
continuous <-select_if(data_adult, is.numeric)
summary(continuous)
# Histogram with kernel density curve
ggplot(continuous, aes(x = hours.per.week)) +
geom_density(alpha = .2, fill = "#FF6666")
# Load libraries
library(dplyr)
library(ggplot2)
# Read data from online source
data_adult <-read.csv("https://raw.githubusercontent.com/guru99-edu/R-Programming/master/adult.csv")
# Ceeck data
glimpse(data_adult)
continuous <-select_if(data_adult, is.numeric)
summary(continuous)
# Histogram with kernel density curve
ggplot(continuous, aes(x = hours.per.week)) +
geom_density(alpha = .2, fill = "#FF6666")
top_one_percent <- quantile(data_adult$hours.per.week, .99)
top_one_percent
